/*
 * ApiDocumentationLib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */
package localhost9095.controllers;

import java.io.*;
import java.util.*;
import java.util.concurrent.*;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.type.TypeReference;

import localhost9095.*;
import localhost9095.models.*;
import localhost9095.exceptions.*;
import localhost9095.http.client.HttpClient;
import localhost9095.http.client.HttpContext;
import localhost9095.http.request.HttpRequest;
import localhost9095.http.response.HttpResponse;
import localhost9095.http.response.HttpStringResponse;
import localhost9095.http.client.APICallBack;
import localhost9095.controllers.syncwrapper.APICallBackCatcher;

public class SaveTestDataController extends BaseController {
    //private static variables for the singleton pattern
    private static final Object syncObject = new Object();
    private static SaveTestDataController instance = null;

    /**
     * Singleton pattern implementation 
     * @return The singleton instance of the SaveTestDataController class 
     */
    public static SaveTestDataController getInstance() {
        if (null == instance) {
            synchronized (syncObject) {
                if (null == instance) {
                    instance = new SaveTestDataController();
                }
            }
        }
        return instance;
    }

    /**
     * This method saves claims using ClaimsDisbursementModel
     * @param    claimsDisbursementModel    Required parameter: claimsDisbursementModel
     * @return    Returns the ClaimsDisbursementModel response from the API call 
     */
    public ClaimsDisbursementModel createSavePaymentInfoUsingPOST(
                final ClaimsDisbursementModel claimsDisbursementModel
    ) throws Throwable {

        HttpRequest _request = _buildCreateSavePaymentInfoUsingPOSTRequest(claimsDisbursementModel);
        HttpResponse _response = getClientInstance().executeAsString(_request);
        HttpContext _context = new HttpContext(_request, _response);

        return _handleCreateSavePaymentInfoUsingPOSTResponse(_context);
    }

    /**
     * This method saves claims using ClaimsDisbursementModel
     * @param    claimsDisbursementModel    Required parameter: claimsDisbursementModel
     */
    public void createSavePaymentInfoUsingPOSTAsync(
                final ClaimsDisbursementModel claimsDisbursementModel,
                final APICallBack<ClaimsDisbursementModel> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {

                HttpRequest _request;
                try {
                    _request = _buildCreateSavePaymentInfoUsingPOSTRequest(claimsDisbursementModel);
                } catch (Exception e) {
                    callBack.onFailure(null, e);
                    return;
                }

                // Invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {
                            ClaimsDisbursementModel returnValue = _handleCreateSavePaymentInfoUsingPOSTResponse(_context);
                            callBack.onSuccess(_context, returnValue);
                        } catch (Exception e) {
                            callBack.onFailure(_context, e);
                        }
                    }

                    public void onFailure(HttpContext _context, Throwable _exception) {
                        // Let the caller know of the failure
                        callBack.onFailure(_context, _exception);
                    }
                });
            }
        };

        // Execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Builds the HttpRequest object for createSavePaymentInfoUsingPOST
     */
    private HttpRequest _buildCreateSavePaymentInfoUsingPOSTRequest(
                final ClaimsDisbursementModel claimsDisbursementModel) throws IOException, APIException {
        //the base uri for api requests
        String _baseUri = Configuration.baseUri;

        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri + "/save/claims");
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>();
        _headers.put("user-agent", BaseController.userAgent);
        _headers.put("accept", "application/json");
        _headers.put("content-type", "application/json");


        //prepare and invoke the API call request to fetch the response
        HttpRequest _request = getClientInstance().postBody(_queryUrl, _headers, APIHelper.serialize(claimsDisbursementModel));

        // Invoke the callback before request if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        return _request;
    }

    /**
     * Processes the response for createSavePaymentInfoUsingPOST
     * @return An object of type ClaimsDisbursementModel
     */
    private ClaimsDisbursementModel _handleCreateSavePaymentInfoUsingPOSTResponse(HttpContext _context)
            throws APIException, IOException {
        HttpResponse _response = _context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnAfterResponse(_context);
        }

        //Error handling using HTTP status codes
        int _responseCode = _response.getStatusCode();

        if (_responseCode == 401) {
            throw new APIException("Unauthorized", _context);
        }
        if (_responseCode == 403) {
            throw new APIException("Forbidden", _context);
        }
        if (_responseCode == 404) {
            throw new APIException("Not Found", _context);
        }
        //handle errors defined at the API level
        validateResponse(_response, _context);

        //extract result from the http response
        String _responseBody = ((HttpStringResponse)_response).getBody();
        ClaimsDisbursementModel _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<ClaimsDisbursementModel>(){});

        return _result;
    }

    /**
     * This method saves maturity using MaturityDisbursementModel
     * @param    maturityDisbursementModel    Required parameter: maturityDisbursementModel
     * @return    Returns the MaturityDisbursementModel response from the API call 
     */
    public MaturityDisbursementModel createSavePaymentInfoUsingPOST1(
                final MaturityDisbursementModel maturityDisbursementModel
    ) throws Throwable {

        HttpRequest _request = _buildCreateSavePaymentInfoUsingPOST1Request(maturityDisbursementModel);
        HttpResponse _response = getClientInstance().executeAsString(_request);
        HttpContext _context = new HttpContext(_request, _response);

        return _handleCreateSavePaymentInfoUsingPOST1Response(_context);
    }

    /**
     * This method saves maturity using MaturityDisbursementModel
     * @param    maturityDisbursementModel    Required parameter: maturityDisbursementModel
     */
    public void createSavePaymentInfoUsingPOST1Async(
                final MaturityDisbursementModel maturityDisbursementModel,
                final APICallBack<MaturityDisbursementModel> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {

                HttpRequest _request;
                try {
                    _request = _buildCreateSavePaymentInfoUsingPOST1Request(maturityDisbursementModel);
                } catch (Exception e) {
                    callBack.onFailure(null, e);
                    return;
                }

                // Invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {
                            MaturityDisbursementModel returnValue = _handleCreateSavePaymentInfoUsingPOST1Response(_context);
                            callBack.onSuccess(_context, returnValue);
                        } catch (Exception e) {
                            callBack.onFailure(_context, e);
                        }
                    }

                    public void onFailure(HttpContext _context, Throwable _exception) {
                        // Let the caller know of the failure
                        callBack.onFailure(_context, _exception);
                    }
                });
            }
        };

        // Execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Builds the HttpRequest object for createSavePaymentInfoUsingPOST1
     */
    private HttpRequest _buildCreateSavePaymentInfoUsingPOST1Request(
                final MaturityDisbursementModel maturityDisbursementModel) throws IOException, APIException {
        //the base uri for api requests
        String _baseUri = Configuration.baseUri;

        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri + "/save/maturity");
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>();
        _headers.put("user-agent", BaseController.userAgent);
        _headers.put("accept", "application/json");
        _headers.put("content-type", "application/json");


        //prepare and invoke the API call request to fetch the response
        HttpRequest _request = getClientInstance().postBody(_queryUrl, _headers, APIHelper.serialize(maturityDisbursementModel));

        // Invoke the callback before request if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        return _request;
    }

    /**
     * Processes the response for createSavePaymentInfoUsingPOST1
     * @return An object of type MaturityDisbursementModel
     */
    private MaturityDisbursementModel _handleCreateSavePaymentInfoUsingPOST1Response(HttpContext _context)
            throws APIException, IOException {
        HttpResponse _response = _context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnAfterResponse(_context);
        }

        //Error handling using HTTP status codes
        int _responseCode = _response.getStatusCode();

        if (_responseCode == 401) {
            throw new APIException("Unauthorized", _context);
        }
        if (_responseCode == 403) {
            throw new APIException("Forbidden", _context);
        }
        if (_responseCode == 404) {
            throw new APIException("Not Found", _context);
        }
        //handle errors defined at the API level
        validateResponse(_response, _context);

        //extract result from the http response
        String _responseBody = ((HttpStringResponse)_response).getBody();
        MaturityDisbursementModel _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<MaturityDisbursementModel>(){});

        return _result;
    }

    /**
     * This method saves salary using SalaryDisbursementModel
     * @param    salaryDisbursementModel    Required parameter: salaryDisbursementModel
     * @return    Returns the SalaryDisbursementModel response from the API call 
     */
    public SalaryDisbursementModel createSavePaymentInfoUsingPOST2(
                final SalaryDisbursementModel salaryDisbursementModel
    ) throws Throwable {

        HttpRequest _request = _buildCreateSavePaymentInfoUsingPOST2Request(salaryDisbursementModel);
        HttpResponse _response = getClientInstance().executeAsString(_request);
        HttpContext _context = new HttpContext(_request, _response);

        return _handleCreateSavePaymentInfoUsingPOST2Response(_context);
    }

    /**
     * This method saves salary using SalaryDisbursementModel
     * @param    salaryDisbursementModel    Required parameter: salaryDisbursementModel
     */
    public void createSavePaymentInfoUsingPOST2Async(
                final SalaryDisbursementModel salaryDisbursementModel,
                final APICallBack<SalaryDisbursementModel> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {

                HttpRequest _request;
                try {
                    _request = _buildCreateSavePaymentInfoUsingPOST2Request(salaryDisbursementModel);
                } catch (Exception e) {
                    callBack.onFailure(null, e);
                    return;
                }

                // Invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {
                            SalaryDisbursementModel returnValue = _handleCreateSavePaymentInfoUsingPOST2Response(_context);
                            callBack.onSuccess(_context, returnValue);
                        } catch (Exception e) {
                            callBack.onFailure(_context, e);
                        }
                    }

                    public void onFailure(HttpContext _context, Throwable _exception) {
                        // Let the caller know of the failure
                        callBack.onFailure(_context, _exception);
                    }
                });
            }
        };

        // Execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Builds the HttpRequest object for createSavePaymentInfoUsingPOST2
     */
    private HttpRequest _buildCreateSavePaymentInfoUsingPOST2Request(
                final SalaryDisbursementModel salaryDisbursementModel) throws IOException, APIException {
        //the base uri for api requests
        String _baseUri = Configuration.baseUri;

        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri + "/save/salary");
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>();
        _headers.put("user-agent", BaseController.userAgent);
        _headers.put("accept", "application/json");
        _headers.put("content-type", "application/json");


        //prepare and invoke the API call request to fetch the response
        HttpRequest _request = getClientInstance().postBody(_queryUrl, _headers, APIHelper.serialize(salaryDisbursementModel));

        // Invoke the callback before request if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        return _request;
    }

    /**
     * Processes the response for createSavePaymentInfoUsingPOST2
     * @return An object of type SalaryDisbursementModel
     */
    private SalaryDisbursementModel _handleCreateSavePaymentInfoUsingPOST2Response(HttpContext _context)
            throws APIException, IOException {
        HttpResponse _response = _context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnAfterResponse(_context);
        }

        //Error handling using HTTP status codes
        int _responseCode = _response.getStatusCode();

        if (_responseCode == 401) {
            throw new APIException("Unauthorized", _context);
        }
        if (_responseCode == 403) {
            throw new APIException("Forbidden", _context);
        }
        if (_responseCode == 404) {
            throw new APIException("Not Found", _context);
        }
        //handle errors defined at the API level
        validateResponse(_response, _context);

        //extract result from the http response
        String _responseBody = ((HttpStringResponse)_response).getBody();
        SalaryDisbursementModel _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<SalaryDisbursementModel>(){});

        return _result;
    }

}
